#version 120
#define LOWPREC 
#define lowp
#define mediump
#define highp
#define precision
// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes

uniform sampler2D gm_BaseTexture;

uniform bool gm_PS_FogEnabled;
uniform vec4 gm_FogColour;
uniform bool gm_AlphaTestEnabled;
uniform float gm_AlphaRefValue;

void DoAlphaTest(vec4 SrcColour)
{
	if (gm_AlphaTestEnabled)
	{
		if (SrcColour.a <= gm_AlphaRefValue)
		{
			discard;
		}
	}
}

void DoFog(inout vec4 SrcColour, float fogval)
{
	if (gm_PS_FogEnabled)
	{
		SrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); 
	}
}

#define _YY_GLSL_ 1
//
//  Krokosha car WHEEL shader FRAGMENT
//
varying vec2 v_vTexcoord;
varying vec4 v_vColour;

uniform vec3 wheeldisk_color1;
uniform vec3 wheeldisk_color2;
uniform float outline_mode;
uniform float is_custom_wheel;
uniform float render_fidelity;

void main()
{
	
	if (is_custom_wheel == 1.0) {
	
		gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );
		
	}else{
		vec2 uv = v_vTexcoord * 2.0 - 1.0;
		
		float distance = 1.0 - length(uv);
		if (distance < 0.5){
			gl_FragColor = v_vColour * vec4(0,0,0,1);
		}else{
			if (sign(uv.y) == sign(uv.x) ) {
				gl_FragColor = v_vColour * vec4(wheeldisk_color1,1);
			} else {
				gl_FragColor = v_vColour * vec4(wheeldisk_color2,1);
			}
		}
	
	}
    
	
}
